[{"/home/akdas/Desktop/Work/quiz_frontend/src/index.js":"1","/home/akdas/Desktop/Work/quiz_frontend/src/App.js":"2","/home/akdas/Desktop/Work/quiz_frontend/src/Components/RandomQuiz.js":"3","/home/akdas/Desktop/Work/quiz_frontend/src/Components/QuizSelect.jsx":"4","/home/akdas/Desktop/Work/quiz_frontend/src/Api/ConnectApi.js":"5","/home/akdas/Desktop/Work/quiz_frontend/src/Components/Framework/Header.js":"6","/home/akdas/Desktop/Work/quiz_frontend/src/Components/Framework/Footer.js":"7"},{"size":221,"mtime":1609337038031,"results":"8","hashOfConfig":"9"},{"size":424,"mtime":1610897421406,"results":"10","hashOfConfig":"9"},{"size":4105,"mtime":1619689596477,"results":"11","hashOfConfig":"9"},{"size":4016,"mtime":1619689548484,"results":"12","hashOfConfig":"9"},{"size":647,"mtime":1609407728538,"results":"13","hashOfConfig":"9"},{"size":942,"mtime":1610231460437,"results":"14","hashOfConfig":"9"},{"size":1277,"mtime":1615127795900,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1is1dzo",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/home/akdas/Desktop/Work/quiz_frontend/src/index.js",[],["35","36"],"/home/akdas/Desktop/Work/quiz_frontend/src/App.js",[],"/home/akdas/Desktop/Work/quiz_frontend/src/Components/RandomQuiz.js",["37","38"],"import React, {useState,useEffect} from 'react';\nimport {useParams, Link} from 'react-router-dom';\nimport ConnectApi from '../Api/ConnectApi';\n\nimport Header from \"./Framework/Header\";\nimport Footer  from \"./Framework/Footer\";\n\n\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Radio from '@material-ui/core/Radio'\nimport Button from '@material-ui/core/Button'\n\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {Alert,AlertTitle} from '@material-ui/lab';\n\nconst useStyles = makeStyles((theme)=>({\n\tpaper: {\n\n\t\tmarginTop: theme.spacing(10),\n\t\tdisplay: \"flex\",\n\t\tflexDirection: \"column\",\n\t},\n\n\tform: {\n\t\twidth: \"100%\",\n\t\tmargininTop: theme.spacing(1),\n\t},\n\n\tsubmit: {\n\t\tmargin: theme.spacing(2,0,2),\n\t},\n\n\tcorrect: {\n\t\tcolor: \"blue\",\n\t},\n\n}));\n\nconst RandomQuiz = ()=>{\n\n\tconst classes = useStyles();\n\n\tconst {topic} = useParams();\n\t//console.log(topic);\n\n\t// const API_URL = \"http://127.0.0.1:8000/quiz/api/r/\" + topic;\n\tconst API_URL = \"https://csf-quiz.herokuapp.com/quiz/api/r/\" + topic; \n\n\tconst [dataState] = ConnectApi(API_URL);\n\n\tconsole.log(dataState,\"dataState\");\n\tconst [answer,setAnswer]=useState({});\n\n\tconst ans = dataState.data.flatMap((q)=> q.answer);\n\tconsole.log(ans,\"ans\");\n\n\n\tconst [answerCheck,setAnswerCheck] = useState();\n\n\tuseEffect(()=>{\n\t\tif(Object.keys(answer).length===0) {\n\t\t\tsetAnswer(createInitialAnswer());\n\t\t}\n\t}, [answer]);\n\n\tconsole.log(answer);\n\n\t\n\tconst handleSelection = (e)=>{\n\t\tsetAnswer({...answer,[e.target.value]:e.target.checked});\n\t}\n\t\n\tconst createInitialAnswer=()=>{\n\t\tlet z = ans.flatMap((obj)=>obj.id);\n\t\tvar falseInitAnsObj = {};\n\n\t\tfor(var x=0;x<ans.length;x++) {\n\t\t\tfalseInitAnsObj[z[x]]=false;\n\t\t}\n\t\treturn falseInitAnsObj;\n\t};\n\n\t\n\tconst checkAnswer = (e)=>{\n\t\te.preventDefault();\n\n\t\tlet n=ans.map((obj)=>obj.is_right);\n\t\tlet y = {...n};\n\n\t\tconsole.log(y,\"actualAns answer\");\n\t\tconsole.log(answer,\"user answer\");\n\n\t\tfunction  arrayEquals(usrAns,actualAns) {\n\n\t\t\treturn (\n\t\t\t\tArray.isArray(usrAns) &&\n\t\t\t\tArray.isArray(actualAns) &&\n\t\t\t\tusrAns.length===actualAns.length &&\n\t\t\t\tactualAns.every((val,index)=>val===usrAns[index])\n\t\t\t\t);\n\t\t}\n\n\t\tlet actualAns = Object.values(y);\n\t\tlet usrAns= Object.values(answer);\n\t\tif(arrayEquals(usrAns,actualAns))\n\t\t{\n\t\t\tsetAnswerCheck(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tsetAnswerCheck(false);\n\t\t}\n\t\t\n\t}\n\n\tfunction refreshPage() {\n\t\twindow.location.reload(false);\n\t}\n\n\n\tfunction Result() {\n\t\tif(answerCheck===true) {\n\t\t\treturn(\n\t\t\t\t<Alert severity =\"success\">\n\t\t\t\t\t<AlertTitle> Correct Answer </AlertTitle>\n\t\t\t\t\tWell Done you got it right.\n\t\t\t\t\t<Link href=\"#\" variant=\"body2\" onClick={refreshPage}>\n\t\t\t\t\t {\"Next Question\"}\n\t\t\t\t\t</Link>\n\t\t\t\t</Alert>\t \n\n\t\t\t\t)\n\t\t}\n\t\telse if(answerCheck===false) {\n\t\t\treturn(\n\t\t\t\t<Alert severity =\"error\">\n\t\t\t\t\t<AlertTitle> Wrong Answer </AlertTitle>\n\t\t\t\t\tPlease Try Again\n\t\t\t\t</Alert>\t\n\n\t\t\t)\n\t\t}\n\t\telse {\n\t\t\treturn (\n\t\t\t<> </>\n\t\t\t)\n\t\t}\n\n\t}\n\n\n\treturn (\n\t\t<>\n\t\t\t<Header/>\n\n\t\t\t<Container component=\"main\" maxWidth=\"xs\">\n\t\t\t\t<div className={classes.paper}>\n\n\t\t\t\t\t{dataState.data.map(({title, answer},i)=>(\n\n\t\t\t\t\t\t<div key={i}>\n\t\t\t\t\t\t\t<Typography component=\"h1\" variant=\"h5\">\n\t\t\t\t\t\t\t{title}\n\t\t\t\t\t\t\t</Typography>\n\n\t\t\t\t\t\t\t{answer.map(({answer_text,id})=>(\n\n\t\t\t\t\t\t\t<RadioGroup>\n         \t\t\t\t\t\n         \t\t\t\t\t\t<FormControlLabel \n         \t\t\t\t\t\t  control={\n         \t\t\t\t\t\t  \t<Checkbox\n         \t\t\t\t\t\t  \t\tvalue={id}\n         \t\t\t\t\t\t  \t\tcolor=\"primary\"\n         \t\t\t\t\t\t  \t\tonChange={handleSelection}\n         \t\t\t\t\t\t  \t/>\t\n         \t\t\t\t\t\t  }\n         \t\t\t\t\t\t  label={answer_text}\n         \t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t</RadioGroup>\n\n\t\t\t\t\t\t\t))}\n\n\n\t\t\t\t\t\t</div>\t\n\n\t\t\t\t\t\t))}\n\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\tclassName={classes.submit}\n\t\t\t\t\t\tonClick={checkAnswer}\n\t\t\t\t\t\t>\n\t\t\t\t\t\tSubmit Answer\n\n\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t<Result/>\n\n\t\t\t\t</div>\n\n\t\t\t</Container>\n\t\t\t\n\t\t\t<Footer/>\n\t\t\t\n\t\t</>\n\t\t)\n}\n\nexport default RandomQuiz;","/home/akdas/Desktop/Work/quiz_frontend/src/Components/QuizSelect.jsx",["39","40"],"import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Header from \"./Framework/Header\";\nimport Footer  from \"./Framework/Footer\";\nimport useCollectData from \"../Api/ConnectApi\";\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\n\nconst useStyles = makeStyles((theme) => ({\n  '@global': {\n    ul: {\n      margin: 0,\n      padding: 0,\n      listStyle: 'none',\n    },\n  },\n  appBar: {\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  toolbar: {\n    flexWrap: 'wrap',\n  },\n  toolbarTitle: {\n    flexGrow: 1,\n  },\n  link: {\n    margin: theme.spacing(1, 1.5),\n  },\n  heroContent: {\n    padding: theme.spacing(5, 0, 1.5),\n  },\n  cardHeader: {\n  \tdisplay: 'flex',\n    justify: 'space-evenly',\n    alignItems: 'center',\n\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[700],\n\n  },\n  cardPricing: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'baseline',\n    marginBottom: theme.spacing(2),\n  },\n  cardHover: {\n  \tbackground: \"#fff\",\n  \tborderRadius: \"10px\",\n  \ttransform: 'scale(1.03)',\n  \tboxShadow: \"0 13px 40px -5px hsla(240, 30.1%, 28%, 0.12), 0 8px 32px -8px hsla(0, 0%, 0%, 0.14), 0 -6px 32px -6px hsla(0, 0%, 0%, 0.02)\",\n  \ttransition: \"all ease 200ms\",\n  \t'&:hover': {\n       transform: \"scale(1.03)\",\n  boxShadow: \"0 13px 27px -5px hsla(240, 30.1%, 28%, 0.25), 0 8px 16px -8px hsla(0, 0%, 0%, 0.3), 0 -6px 16px -6px hsla(0, 0%, 0%, 0.03)\"\n    },\n  }\n\n}));\n\n\nconst QuizSelect=()=>{\n\n\n\tconst classes = useStyles();\n\n\t// const API_URL = \"http://127.0.0.1:8000/quiz/api/\";\n\tconst API_URL = \"https://csf-quiz.herokuapp.com/quiz/api/\"\n\t\n\tconst [dataState] = useCollectData(API_URL);\n\n\tconsole.log(\"in quiz select\")\n\tconsole.log(dataState);\n\n\n\treturn (\n\t\t<> \n\n\t\t\t<CssBaseline />\n\n\t\t\t<Header/>\n\n\t\t\t{/* Hero unit */}\n\t\t   \n\t\t    <Container maxWidth=\"sm\" component=\"main\" className={classes.heroContent}>\n\n\t\t\t    \t\n\t\t\t        \n\n\t\t    </Container>\n\n\t\t    <Container maxWidth=\"md\" component=\"main\" >\n\n\t\t    \t<Grid container spacing={5} alignItems=\"flex-end\">\n\n\n\t\t    \t\t{dataState.data.map((q)=>(\n\n\t\t    \t\t<Grid item key={q.title} xs={12} md={4}>\n\t\t\t    \t\t\n\t\t\t    \t\t<Card className={classes.cardHover}>\n\n\t\t\t    \t\t\t<CardHeader\n\t\t\t    \t\t\t  title={q.title}\n\t\t\t    \t\t\t  titleTypography={{align:\"center\"}}\n\t\t\t    \t\t\t  subHeaderTypography={{align:\"center\"}}\n\t\t\t    \t\t\t  className={classes.cardHeader} \n\t\t\t    \t\t\t/>\n\t\t\t    \t\t\t\n\t\t\t    \t\t\t<CardContent>\n\n\t\t\t    \t\t\t\t\n\n\t\t\t    \t\t\t\t<ul>\n\t\t\t    \t\t\t\t\t<Typography\n\t\t\t    \t\t\t\t\t  component=\"li\"\n\t\t\t    \t\t\t\t\t  variant=\"subtitle1\"\n\t\t\t    \t\t\t\t\t  align=\"center\"\n\t\t\t    \t\t\t\t\t>\t\t\n\t\t\t    \t\t\t\t\t{q.questionsCount} Questions\n\t\t\t    \t\t\t\t\t</Typography>\n\t\t\t    \t\t\t\t</ul>\t\n\t\t\t    \t\t\t</CardContent>\n\n\t\t\t    \t\t\t<CardActions>\n\n\t\t\t    \t\t\t\t\n\n\t\t\t    \t\t\t\t<Button\n\n\t\t\t    \t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t        borderRadius: 15,\n\t\t\t\t\t\t\t\t        backgroundColor: \"#21b6ae\",\n\t\t\t\t\t\t\t\t       \n\t\t\t\t\t\t\t\t        fontSize: \"15px\"\n\t\t\t\t\t\t\t\t    }}\n\n\t\t\t    \t\t\t\t  component={Link} to={\"/r/\" + q.title}\n\t\t\t    \t\t\t\t  fullWidth\n\t\t\t    \t\t\t\t  variant=\"contained\"\n\t\t\t    \t\t\t\t  color=\"primary\"\n\t\t\t    \t\t\t\t  href=\"http://127.0.0.1:8000/quiz/api/r/OOPs\"\n\t\t\t    \t\t\t\t>\n\t\t\t    \t\t\t\t\n\t\t\t    \t\t\t\t\tStart Quiz\n\t\t\t    \t\t\t\t</Button>\n\n\n\t\t\t    \t\t\t</CardActions>\n\n\t\t\t    \t\t</Card>\n\n\t\t\t    \t</Grid>\t\n\n\t\t    \t\t))}\n\n\t\t    \t</Grid>\n\t\t        \n\n\t\t \n\n\t\t    </Container>\n\n\t\t    <Footer/>\n\t\t\t\n\t\t</>\n\t\t);\n}\n\nexport default QuizSelect;","/home/akdas/Desktop/Work/quiz_frontend/src/Api/ConnectApi.js",["41"],"import axios from 'axios';\n\nimport {useState,useEffect} from 'react';\n\nconst useCollectData = (url)=>{\n\n\tconst [fetch,setFetch] = useState({isFetching:false})\n\tconst [dataState,setdataState] = useState({data:[]});\n\tconst [apiurl] = useState(url);\n\n\tuseEffect(()=>{\n\t\tconst fetchDataFromApi = async ()=>{\n\n\t\t\ttry{\n\t\t\t\tsetFetch({isFetching:true})\n\n\t\t\t\tconst response = await axios.get(apiurl)\n\n\t\t\t\tsetdataState({...dataState, data:response.data});\n\n\t\t\t}\n\t\t\tcatch (e){\n\t\t\t\tsetFetch({...fetch, isFetching:true})\n\t\t\t}\n\n\t\t};\n\n\t\tfetchDataFromApi();\n\t},[]);\n\n\tconsole.log(dataState,\"in use effect\");\n\n\treturn [dataState]\n\n}\n\nexport default useCollectData;","/home/akdas/Desktop/Work/quiz_frontend/src/Components/Framework/Header.js",[],"/home/akdas/Desktop/Work/quiz_frontend/src/Components/Framework/Footer.js",[],["42","43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":12,"column":8,"nodeType":"50","messageId":"51","endLine":12,"endColumn":13},{"ruleId":"52","severity":1,"message":"53","line":68,"column":5,"nodeType":"54","endLine":68,"endColumn":13,"suggestions":"55"},{"ruleId":"48","severity":1,"message":"56","line":18,"column":26,"nodeType":"50","messageId":"51","endLine":18,"endColumn":39},{"ruleId":"48","severity":1,"message":"57","line":21,"column":7,"nodeType":"50","messageId":"51","endLine":21,"endColumn":16},{"ruleId":"52","severity":1,"message":"58","line":29,"column":4,"nodeType":"54","endLine":29,"endColumn":6,"suggestions":"59"},{"ruleId":"44","replacedBy":"60"},{"ruleId":"46","replacedBy":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'Radio' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createInitialAnswer'. Either include it or remove the dependency array.","ArrayExpression",["64"],"'ThemeProvider' is defined but never used.","'darkTheme' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'apiurl', 'dataState', and 'fetch'. Either include them or remove the dependency array. You can also do a functional update 'setdataState(d => ...)' if you only need 'dataState' in the 'setdataState' call.",["65"],["62"],["63"],"no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},"Update the dependencies array to be: [answer, createInitialAnswer]",{"range":"70","text":"71"},"Update the dependencies array to be: [apiurl, dataState, fetch]",{"range":"72","text":"73"},[1592,1600],"[answer, createInitialAnswer]",[545,547],"[apiurl, dataState, fetch]"]